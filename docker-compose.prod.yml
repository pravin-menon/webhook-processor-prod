services:
  webhook-processor:
    build: 
      context: .
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-webhook-processor}:${TAG:-latest}
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_PORT=9090
      - METRICS_PATH=/metrics
      # Cloud services
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-webhook_events}
      - MONGODB_COLLECTION=${MONGODB_COLLECTION:-events}
      - CLOUDAMQP_URL=${CLOUDAMQP_URL}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE:-webhook_events}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-webhook_queue}
      # Security
      - API_KEY_HEADER=${API_KEY_HEADER:-X-API-Key}
      - MAILERCLOUD_API_KEYS=${MAILERCLOUD_API_KEYS}
      # Domain configuration for nginx
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    expose:
      - "8080"
      - "9090"
    networks:
      - proxy-network
      - internal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  webhook-worker:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    image: ${DOCKER_REGISTRY:-webhook-processor}-worker:${TAG:-latest}
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # Cloud services
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-webhook_events}
      - MONGODB_COLLECTION=${MONGODB_COLLECTION:-events}
      - CLOUDAMQP_URL=${CLOUDAMQP_URL}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE:-webhook_events}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-webhook_queue}
    networks:
      - internal

  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - ./nginx/custom.conf:/etc/nginx/conf.d/custom.conf:ro
    environment:
      - DEFAULT_HOST=${DOMAIN}
      - ENABLE_IPV6=true
      - NGINX_CLIENT_MAX_BODY_SIZE=${NGINX_CLIENT_MAX_BODY_SIZE:-10m}
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
      - NGINX_WEBHOOK_RATE_LIMIT=${NGINX_WEBHOOK_RATE_LIMIT:-10r/s}
      - NGINX_API_RATE_LIMIT=${NGINX_API_RATE_LIMIT:-100r/m}
    networks:
      - proxy-network
    restart: unless-stopped

  letsencrypt:
    image: nginxproxy/acme-companion:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
      - NGINX_PROXY_CONTAINER=nginx-proxy
    depends_on:
      - nginx-proxy
    networks:
      - proxy-network
    restart: unless-stopped

  # Production monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - internal
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - internal
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  certs:
  vhost:
  html:
  acme:
  prometheus_data:
  grafana_data:

networks:
  proxy-network:
    driver: bridge
  internal:
    driver: bridge
